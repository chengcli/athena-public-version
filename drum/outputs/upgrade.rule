@@ output/output.hpp
  [+:after std::string type] {
    std::string grid;        // (CCC,CCF,CFC,...)
  }
  [r:1 OutputData()] {
    pnext(nullptr),  pprev(nullptr) -> grid("CCC"), pnext(nullptr),  pprev(nullptr)
  }
  [+:after WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag)] {
    virtual void CombineBlocks() {};
  }
  [+:before EOF] {
    //----------------------------------------------------------------------------------------
    //! \class NetcdfOutput
    //  \brief derived OutputType class for Netcdf dumps

    class NetcdfOutput : public OutputType {
    public:
      NetcdfOutput(OutputParameters oparams);
      ~NetcdfOutput() {};
      void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag);
      void CombineBlocks();
    };

    //----------------------------------------------------------------------------------------
    //! \class PnetcdfOutput
    //  \brief derived OutputType class for parallel Netcdf dumps

    class PnetcdfOutput : public OutputType {
    public:
      PnetcdfOutput(OutputParameters oparams);
      ~PnetcdfOutput() {};
      void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag);
    };

    //----------------------------------------------------------------------------------------
  }

@@ output/output.cpp
  [+:after op.file_type.compare("hdf5")|#endif] {
        } else if (op.file_type.compare("netcdf") == 0) {
    #ifdef NETCDFOUTPUT
          pnew_type = new NetcdfOutput(op);
    #else
          msg << "### FATAL ERROR in Outputs constructor" << std::endl
              << "Executable not configured for NETCDF outputs, but NETCDF file format "
              << "is requested in output block '" << op.block_name << "'" << std::endl;
          ATHENA_ERROR(msg);
    #endif
        } else if (op.file_type.compare("pnetcdf") == 0) {
    #ifdef PNETCDFOUTPUT
          pnew_type = new PnetcdfOutput(op);
    #else
          msg << "### FATAL ERROR in Outputs constructor" << std::endl
              << "Executable not configured for PNETCDF outputs, but PNETCDF file format "
              << "is requested in output block '" << op.block_name << "'" << std::endl;
          ATHENA_ERROR(msg);
    #endif
  }
  [+:before throw an error if output variable name not recognized] {
    // vapor
    if (NVAPOR > 0) {
      if (output_params.variable.compare("prim") == 0 ||
          output_params.variable.compare("vapor") == 0) {
        pod = new OutputData;
        pod->type = "VECTORS";
        pod->name = "vapor";
        pod->data.InitWithShallowSlice(phyd->w,4,1,NVAPOR);
        AppendOutputDataNode(pod);
        num_vars_+=NVAPOR;
      }

      if (output_params.variable.compare("cons") == 0) {
        pod = new OutputData;
        pod->type = "VECTORS";
        pod->name = "vapor";
        pod->data.InitWithShallowSlice(phyd->u,4,1,NVAPOR);
        AppendOutputDataNode(pod);
        num_vars_+=NVAPOR;
      }
    }

    // cloud
    if (NVAPOR > 0) {
      std::string str = "cloud?";
      for (int i = 1; i < NPHASE; ++i) {
        if (output_params.variable.compare("prim") == 0 ||
            output_params.variable.compare("cloud") == 0) {
          pod = new OutputData;
          pod->type = "VECTORS";
          char c = '1' + i - 1;
          pod->name = str + c;
          pod->data.InitWithShallowSlice(phyd->w,4,1+i*NVAPOR,NVAPOR);
          AppendOutputDataNode(pod);
          num_vars_+=NVAPOR;
        }

        if (output_params.variable.compare("cons") == 0) {
          pod = new OutputData;
          pod->type = "VECTORS";
          char c = '1' + i - 1;
          pod->name = str + c;
          pod->data.InitWithShallowSlice(phyd->u,4,1+i*NVAPOR,NVAPOR);
          AppendOutputDataNode(pod);
          num_vars_+=NVAPOR;
        }
      }
    }
  }
  [+:after ptype->WriteOutputFile(pm, pin, wtflag)] {
    ptype->CombineBlocks();
  }

@@ output/history.cpp
  [-:8 hst_data[0] += vol(i)*u_d]
  [+:after Real& u_mz = phyd->u(IM3,k,j,i)] {
    int n = 0;
    for (; n < NMASS; ++n)
      hst_data[n] += vol(i)*phyd->u(n,k,j,i);
    hst_data[n++] += vol(i)*u_mx;
    hst_data[n++] += vol(i)*u_my;
    hst_data[n++] += vol(i)*u_mz;
    hst_data[n++] += vol(i)*0.5*SQR(u_mx)/u_d;
    hst_data[n++] += vol(i)*0.5*SQR(u_my)/u_d;
    hst_data[n++] += vol(i)*0.5*SQR(u_mz)/u_d;
  }
  [r:1 hst_data[7] += vol(i)*u_e] {
    hst_data[n++] += vol(i)*u_e;
  }
  [-:1 std::fprintf(pfile,"[%d]=mass]
  [+:after std::fprintf(pfile,"[%d]=dt] {
    for (int n = 0; n < NMASS; ++n)
      fprintf(pfile,"[%d]=mass-%d   ", iout++, n);
  }

@@ output/formatted_table.cpp
  [r:1 for (int index = 1; index <= 3; ++index)] {
    3 -> pdata->data.GetDim4()
  }
