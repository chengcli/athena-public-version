@@ reconstruction.hpp:
  [+:before private:] {
    // weno reconstruction functions of various orders in each dimension
    void Weno3X1(const int k, const int j, const int il, const int iu, 
                 const AthenaArray<Real> &w, const AthenaArray<Real> &bcc, 
                 AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno3X2(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, const AthenaArray<Real> &bcc,
                 AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno3X3(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, const AthenaArray<Real> &bcc,
                 AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno5X1(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, const AthenaArray<Real> &bcc,
                 AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno5X2(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, const AthenaArray<Real> &bcc,
                 AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno5X3(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, const AthenaArray<Real> &bcc,
                 AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    // overloads for non-fluid (cell-centered Hydro prim. and magnetic field) reconstruction
    void Weno3X1(const int k, const int j, const int il, const int iu, 
                 const AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno3X2(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno3X3(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno5X1(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno5X2(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr);

    void Weno5X3(const int k, const int j, const int il, const int iu,
                 const AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr);
  }

@@ reconstruction.cpp:
  [+:after,2 (input_recon == "4c")] {
    } else if (input_recon == "5") {
      xorder = 5;
    } else if (input_recon == "5c") {
      xorder = 5;
      characteristic_projection = true;
  }

  [+:before switch to secondary PLM and PPM] {
    if (xorder == 5) {
      int req_nghost = 3;
      if (MAGNETIC_FIELDS_ENABLED)
        req_nghost += 2;
      if (NGHOST < req_nghost) {
        std::stringstream msg;
        msg << "### FATAL ERROR in Reconstruction constructor" << std::endl
            << "xorder=" << input_recon <<
            " (WENO5) reconstruction selected, but nghost=" << NGHOST << std::endl
            << "Reconfigure with --nghost=XXX with XXX > " << req_nghost-1 << std::endl;
        ATHENA_ERROR(msg);
      }
    }
  }
