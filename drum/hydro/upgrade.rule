@@ hydro/hydro.hpp
  [+:in header/C] {
    // MPI headers
    #ifdef MPI_PARALLEL
      #include <mpi.h>
    #endif
  }
  [+:after AthenaArray<Real> flux[3]] {
    AthenaArray<Real> du;       // du stores the change of the conservative variable in a substep
    // implicit correction
    int implicit_flag;
  }
  [+:before private:] {
    ~Hydro();
    void DecomposePressure(AthenaArray<Real> &w, int kl, int ku, int jl, int ju);
    void AssemblePressure(AthenaArray<Real> &w, AthenaArray<Real> &wl, AthenaArray<Real> &wr,
      int k, int j, int il, int iu);
    void CheckHydro();
    void ImplicitCorrection(AthenaArray<Real> &du, AthenaArray<Real> const& w, Real dt);

  protected:
    void SendBotPressure(AthenaArray<Real> &psf, AthenaArray<Real> &entropy,
      AthenaArray<Real> &gamma, NeighborBlock ntop,
      int kl, int ku, int jl, int ju);
    void WaitBotPressure();
    void RecvBotPressure(AthenaArray<Real> &psf, AthenaArray<Real> &entropy,
      AthenaArray<Real> &gamma, NeighborBlock nbot,
      int kl, int ku, int jl, int ju);
  }
  [+:before EOF/#endif/};] {
    // pressure decomposition
    AthenaArray<Real> psf_;         // hydrostatic pressure at cell face
    AthenaArray<Real> psv_;         // hydrostatic pressure at cell center
    AthenaArray<Real> dsv_;         // reference density at cell center
    AthenaArray<Real> gamma_;       // polytropic index
    AthenaArray<Real> entropy_;     // pseudo entropy

  #ifdef MPI_PARALLEL
    MPI_Request req_send_bot_pressure_;
    MPI_Request req_send_top_pressure_;
  #endif
  }
  # Implicit has not been implemented

@@ hydro/hydro.cpp
  [+:after pmb->pmy_mesh->UserTimeStep_] {
    // allocate hydrostatic and nonhydrostatic pressure
    psf_.NewAthenaArray(nc3, nc2, nc1 + 1);
    psv_.NewAthenaArray(nc3, nc2, nc1);
    dsv_.NewAthenaArray(nc3, nc2, nc1);
    psbuf_ = new Real [3*nc3*nc2];

    // allocate local polytropic index
    gamma_.NewAthenaArray(nc3, nc2, nc1);
    entropy_.NewAthenaArray(nc3, nc2, nc1);

    // du stores the change of the conservative variable in a substep
    du.NewAthenaArray(NHYDRO, nc3, nc2, nc1);

    // implicit correction
    implicit_flag = pin->GetOrAddInteger("hydro", "implicit_flag", 0);
  }

@@ hydro/calculate_fluxes.cpp
  [+:in header/Athena] {
    #include "../chemistry/chemistry.hpp"
  }
  [+:after pmb->precon->PiecewiseLinearX1(k, j, is-1, ie+1, w, bcc, wl_, wr_)] {
    } else if (order == 5) {
      pmb->precon->Weno5X1(k, j, is-1, ie+1, w, bcc, wl_, wr_);
  }
  [+:after pmb->precon->PiecewiseLinearX2(k, js-1, il, iu, w, bcc, wl_, wr_)] {
    } else if (order == 5) {
      pmb->precon->Weno5X2(k, js-1, il, iu, w, bcc, wl_, wr_);
  }
  [+:after pmb->precon->PiecewiseLinearX2(k, j, il, iu, w, bcc, wlb_, wr_)] {
    } else if (order == 5) {
      pmb->precon->Weno5X2(k, j, il, iu, w, bcc, wlb_, wr_);
  }
  [+:after pmb->precon->PiecewiseLinearX3(ks-1, j, il, iu, w, bcc, wl_, wr_)] {
    } else if (order == 5) {
      pmb->precon->Weno5X3(ks-1, j, il, iu, w, bcc, wl_, wr_);
  }
  [+:after pmb->precon->PiecewiseLinearX3(k, j, il, iu, w, bcc, wlb_, wr_)] {
    } else if (order == 5) {
      pmb->precon->Weno5X3(k, j, il, iu, w, bcc, wlb_, wr_);
  }
  [+:before,once for (int k=kl; k<=ku; ++k)] {
    // decompose pressure to pertubation pressure and hydrostatic pressure
    DecomposePressure(w, kl, ku, jl, ju);
  }
  [+:before,once pmb->pcoord->CenterWidth1] {
    // assemble pressure pertubation
    AssemblePressure(w, wl_, wr_, k, j, is-1, ie+1);
  }
  [+:before,once if (order == 4)] {
    pmb->pchem->AddSedimentationFlux(x1flux, wr_, k, j, is, ie+1);
  }

@@ hydro/new_blockdt.cpp
  [+:before if (fluid_status == FluidFormulation::evolve)] {
    for (int n = 0; n < NHYDRO; ++n)
      wi[n]=w(n,k,j,i);
  }
  [+:after compute minimum of (v1 +/- C)] {
    if (!implicit_flag)
  }
